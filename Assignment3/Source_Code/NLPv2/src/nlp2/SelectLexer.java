/* The following code was generated by JFlex 1.4.3 on 22/11/12 10:13 AM */

/**
 *
 * @author ASHISH
 */
package nlp2;
import java.io.*;
import javax.swing.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/11/12 10:13 AM from the specification file
 * <tt>SelectLexer.l</tt>
 */
class SelectLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\50\2\0\1\47\22\0\1\43\13\0\1\33\3\0"+
    "\12\45\7\0\1\22\1\24\1\27\1\31\1\46\1\4\1\1\4\46"+
    "\1\13\2\46\1\34\3\46\1\10\3\46\1\20\3\46\4\0\1\40"+
    "\1\0\1\26\1\42\1\12\1\7\1\2\1\35\1\37\1\15\1\5"+
    "\2\36\1\11\1\30\1\6\1\16\1\32\1\44\1\25\1\14\1\3"+
    "\1\23\1\21\1\17\1\36\1\41\1\36\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\27\2\1\3\1\4\1\2\1\1\1\5"+
    "\2\2\1\0\3\2\1\6\1\7\12\2\1\10\12\2"+
    "\1\10\5\2\1\11\1\2\2\0\1\3\2\2\1\0"+
    "\24\2\1\11\2\2\6\0\5\2\1\12\15\2\6\0"+
    "\2\2\1\0\1\2\1\12\11\2\1\0\1\13\4\0"+
    "\1\13\1\2\1\0\3\2\1\13\3\2\1\0\1\13"+
    "\4\0\1\2\1\0\4\2\3\0\1\2\1\0\1\2"+
    "\3\0\1\2\5\0\1\12\2\0\1\7\3\0\1\14"+
    "\10\0\1\15\12\0\1\16\3\0\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\52\0\u041a\0\u0444\0\u046e\0\52\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\176\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\176\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0444\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u0444\0\u09d8\0\u0a02\0\u0a2c\0\176\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\176\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96"+
    "\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236"+
    "\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386"+
    "\0\u13b0\0\u13da\0\u1404\0\52\0\u142e\0\u1458\0\u1482\0\u14ac"+
    "\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc"+
    "\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c"+
    "\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848\0\52\0\u1872"+
    "\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2"+
    "\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12"+
    "\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\52\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88"+
    "\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028"+
    "\0\u2052\0\u207c\0\u20a6\0\52\0\u20d0\0\u20fa\0\u2124\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\4\1\16\1\17"+
    "\1\20\1\4\1\21\1\4\1\22\1\4\1\23\1\24"+
    "\1\4\1\25\1\4\1\2\1\26\1\27\1\4\1\30"+
    "\1\2\1\4\1\31\1\32\1\4\1\33\1\34\1\35"+
    "\1\36\1\32\53\0\1\34\1\37\2\34\1\40\25\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\3\4\1\34\2\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\1\4\1\42\2\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\4\34\1\43\17\34\1\44\5\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\1\4\1\45\1\4\1\34"+
    "\2\4\1\34\1\46\3\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\1\34\1\47\1\4\1\34\3\4\1\34\2\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\1\50\12\34"+
    "\1\51\15\34\1\0\4\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\4\0\1\34\2\4\1\34\1\52\2\4"+
    "\1\34\2\4\1\34\2\4\1\53\1\4\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\4\0\1\34\2\4\1\34\3\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\4\1\34\1\54\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\41"+
    "\2\4\1\0\1\4\1\0\1\34\4\0\4\34\1\55"+
    "\10\34\1\56\14\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\1\34\1\57\1\4\1\34"+
    "\3\4\1\34\2\4\1\34\1\4\1\60\2\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\1\34\2\4\1\34\3\4\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\2\4\1\34\1\4\1\34\1\4\1\0\1\34\1\61"+
    "\2\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\1\34\2\4\1\34\3\4\1\34\2\4\1\34\1\4"+
    "\1\62\2\4\1\34\1\4\1\34\1\4\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\41"+
    "\2\4\1\0\1\4\1\0\1\34\4\0\14\34\1\63"+
    "\15\34\1\0\4\34\1\0\2\34\1\0\1\34\1\0"+
    "\1\34\4\0\11\34\1\64\20\34\1\0\4\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\34\4\0\15\34\1\65"+
    "\6\34\1\66\5\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\1\34\1\4\1\45\1\34"+
    "\1\4\1\67\1\4\1\34\1\70\1\4\1\34\1\71"+
    "\3\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\22\34\1\72\7\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\1\73\30\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\32\34\1\0\1\34"+
    "\1\74\2\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\1\75\2\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\4\1\34\1\4\1\34\1\76"+
    "\1\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\4\0\1\34"+
    "\1\77\1\4\1\34\1\100\2\4\1\34\2\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\1\4\1\101\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\50\0\1\33\5\0\32\34\1\0\4\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\34\53\0\1\36\2\0"+
    "\2\34\1\102\27\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\20\34\1\103\11\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\11\0"+
    "\1\104\3\0\1\105\40\0\1\34\1\106\1\4\1\34"+
    "\3\4\1\34\2\4\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\4\0\5\34\1\107\24\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\15\34\1\110\14\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\3\4\1\34\2\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\111\1\4\1\0\1\34\4\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\112\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\4\0\10\34\1\113\21\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\15\34\1\114\14\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\3\4\1\34\2\4\1\34"+
    "\1\77\3\4\1\34\1\4\1\34\1\4\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\41"+
    "\2\4\1\0\1\4\1\0\1\34\4\0\1\34\2\4"+
    "\1\34\3\4\1\34\2\4\1\34\4\4\1\34\1\4"+
    "\1\34\1\4\1\34\1\4\1\115\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\1\34\2\4\1\34\3\4\1\34"+
    "\2\4\1\34\1\116\3\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\13\34\1\37\16\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\25\34\1\117\4\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\4\0"+
    "\1\34\2\4\1\34\3\4\1\34\1\120\1\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\2\4\1\121\1\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\1\34\1\122\1\4\1\34\1\123"+
    "\2\4\1\34\2\4\1\34\2\4\1\124\1\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\4\34\1\125\25\34\1\0\4\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\34\4\0\11\34"+
    "\1\126\20\34\1\0\4\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\4\0\24\34\1\127\5\34\1\0\4\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\34\4\0\25\34"+
    "\1\130\4\34\1\0\4\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\4\0\1\34\2\4\1\34\2\4\1\106"+
    "\1\34\2\4\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\1\34\2\4\1\34\3\4\1\34\1\106\1\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\1\131\3\4\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\4\0\13\34\1\132\16\34\1\0\4\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\34\4\0\31\34\1\133"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\1\4\1\134\1\4\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\2\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\4\0\1\34"+
    "\2\4\1\34\3\4\1\34\2\4\1\34\2\4\1\135"+
    "\1\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\1\4\1\136"+
    "\1\34\3\4\1\34\2\4\1\34\4\4\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\4\0\1\34\2\4\1\34\3\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\137\1\34\1\4\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\41"+
    "\2\4\1\0\1\4\1\0\1\34\4\0\1\34\2\4"+
    "\1\34\3\4\1\34\1\140\1\4\1\34\4\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\1\34\1\102\30\34\1\0\4\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\34\26\0\1\141"+
    "\2\0\1\142\30\0\1\143\45\0\6\34\1\102\23\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\27\34\1\74\2\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\5\0\1\144\6\0\1\145"+
    "\25\0\1\146\13\0\1\34\1\4\1\147\1\34\3\4"+
    "\1\34\2\4\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\1\4\1\150\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\4\0\1\34\1\151\30\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\16\34\1\102\13\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\1\4\1\152\1\4\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\2\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\4\0\1\34"+
    "\1\4\1\153\1\34\3\4\1\34\2\4\1\34\4\4"+
    "\1\34\1\4\1\34\1\4\1\34\2\4\1\34\1\4"+
    "\1\34\1\4\1\0\1\34\3\4\1\41\2\4\1\0"+
    "\1\4\1\0\1\34\4\0\5\34\1\154\24\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\4\0"+
    "\1\34\1\155\1\4\1\34\3\4\1\34\2\4\1\34"+
    "\4\4\1\34\1\4\1\34\1\4\1\34\2\4\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\4\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\3\4\1\136\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\4\0\1\34\2\4\1\34\3\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\4\1\34\1\4\1\34\1\156"+
    "\1\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\4\0\1\34"+
    "\2\4\1\34\3\4\1\34\1\4\1\157\1\34\4\4"+
    "\1\34\1\4\1\34\1\4\1\34\2\4\1\34\1\4"+
    "\1\34\1\4\1\0\1\34\3\4\1\41\2\4\1\0"+
    "\1\4\1\0\1\34\4\0\1\34\2\4\1\34\3\4"+
    "\1\34\2\4\1\34\1\156\3\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\4\0\11\34\1\160\20\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\15\34\1\161\14\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\24\34\1\162\5\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\5\34\1\163\24\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\1\164\1\4\1\34\3\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\4\1\34\1\4\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\41"+
    "\2\4\1\0\1\4\1\0\1\34\4\0\2\34\1\165"+
    "\27\34\1\0\4\34\1\0\2\34\1\0\1\34\1\0"+
    "\1\34\4\0\2\34\1\166\12\34\1\167\7\34\1\170"+
    "\4\34\1\0\4\34\1\0\2\34\1\0\1\34\1\0"+
    "\1\34\4\0\1\34\2\4\1\34\2\4\1\136\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\2\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\4\0\1\34"+
    "\2\4\1\34\3\4\1\34\2\4\1\34\4\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\61\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\1\34\1\136\1\4\1\34\3\4"+
    "\1\34\2\4\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\1\34\2\4\1\34\3\4\1\34\2\4\1\34\4\4"+
    "\1\34\1\4\1\34\1\4\1\34\1\4\1\171\1\34"+
    "\1\4\1\34\1\4\1\0\1\34\3\4\1\41\2\4"+
    "\1\0\1\4\1\0\1\34\33\0\1\172\51\0\1\173"+
    "\24\0\1\174\112\0\1\175\7\0\1\176\74\0\1\177"+
    "\25\0\1\34\2\4\1\34\1\4\1\200\1\4\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\2\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\4\0\1\34"+
    "\2\4\1\34\3\4\1\34\2\4\1\34\4\4\1\34"+
    "\1\4\1\34\1\4\1\34\1\201\1\4\1\34\1\4"+
    "\1\34\1\4\1\0\1\34\3\4\1\41\2\4\1\0"+
    "\1\4\1\0\1\34\4\0\11\34\1\37\20\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\4\0"+
    "\1\34\2\4\1\34\3\4\1\34\2\4\1\34\4\4"+
    "\1\34\1\4\1\34\1\4\1\34\2\4\1\34\1\4"+
    "\1\34\1\4\1\0\1\34\3\4\1\202\2\4\1\0"+
    "\1\4\1\0\1\34\4\0\1\34\2\4\1\34\3\4"+
    "\1\34\2\4\1\34\2\4\1\203\1\4\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\4\0\32\34\1\204\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\1\34\2\4\1\34\3\4"+
    "\1\34\1\4\1\77\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\4\0\1\34\1\45\1\4\1\34\3\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\4\1\34\1\4\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\41"+
    "\2\4\1\0\1\4\1\0\1\34\4\0\1\34\2\4"+
    "\1\34\3\4\1\34\2\4\1\34\1\4\1\136\2\4"+
    "\1\34\1\4\1\34\1\4\1\34\2\4\1\34\1\4"+
    "\1\34\1\4\1\0\1\34\3\4\1\41\2\4\1\0"+
    "\1\4\1\0\1\34\4\0\14\34\1\102\15\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\4\0"+
    "\22\34\1\205\7\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\15\34\1\206\14\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\4\0"+
    "\11\34\1\207\20\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\1\34\1\4\1\210\1\34"+
    "\3\4\1\34\2\4\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\4\0\15\34\1\211\14\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\5\34\1\212\24\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\13\34\1\213\16\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\24\34\1\214\5\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\1\34\2\4\1\34\1\4\1\215\1\4\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\2\4\1\34\1\4\1\34\1\4\1\0\1\34\3\4"+
    "\1\41\2\4\1\0\1\4\1\0\1\34\45\0\1\216"+
    "\11\0\1\217\54\0\1\220\33\0\1\217\33\0\1\221"+
    "\42\0\1\222\37\0\1\223\50\0\1\34\2\4\1\34"+
    "\3\4\1\34\2\4\1\34\2\4\1\224\1\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\1\34\1\4\1\225\1\34\3\4"+
    "\1\34\2\4\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\11\0"+
    "\1\104\3\0\1\105\13\0\1\226\24\0\1\34\2\4"+
    "\1\34\3\4\1\34\2\4\1\34\4\4\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\227\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\4\0\5\34\1\230\24\34\1\0\4\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\34\4\0\16\34\1\231"+
    "\13\34\1\0\4\34\1\0\2\34\1\0\1\34\1\0"+
    "\1\34\4\0\14\34\1\154\15\34\1\0\4\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\34\4\0\1\34\2\4"+
    "\1\34\3\4\1\34\2\4\1\34\1\224\3\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\27\34\1\231\2\34\1\0\4\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\34\4\0\15\34"+
    "\1\232\14\34\1\0\4\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\4\0\4\34\1\233\25\34\1\0\4\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\34\4\0\2\34"+
    "\1\234\27\34\1\0\4\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\4\0\1\34\2\4\1\34\3\4\1\34"+
    "\1\4\1\235\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\5\0"+
    "\1\236\102\0\1\237\20\0\1\240\75\0\1\241\37\0"+
    "\1\242\63\0\1\243\24\0\1\34\2\4\1\34\3\4"+
    "\1\34\2\4\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\237\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\1\34\2\4\1\34\3\4\1\34\2\4\1\34\4\4"+
    "\1\34\1\4\1\34\1\4\1\34\2\4\1\34\1\244"+
    "\1\34\1\4\1\0\1\34\3\4\1\41\2\4\1\0"+
    "\1\4\1\0\1\34\33\0\1\245\22\0\1\34\1\246"+
    "\1\4\1\34\3\4\1\34\2\4\1\34\4\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\0\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\4\0\2\34\1\154\27\34\1\0\4\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\34\4\0\1\34"+
    "\1\247\30\34\1\0\4\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\34\4\0\32\34\1\237\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\2\34\1\250\27\34"+
    "\1\0\4\34\1\0\2\34\1\0\1\34\1\0\1\34"+
    "\4\0\27\34\1\251\2\34\1\0\4\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\34\4\0\1\34\1\224\1\4"+
    "\1\34\3\4\1\34\2\4\1\34\4\4\1\34\1\4"+
    "\1\34\1\4\1\34\2\4\1\34\1\4\1\34\1\4"+
    "\1\0\1\34\3\4\1\41\2\4\1\0\1\4\1\0"+
    "\1\34\30\0\1\217\40\0\1\217\46\0\1\252\103\0"+
    "\1\253\11\0\1\254\47\0\1\34\1\255\1\4\1\34"+
    "\3\4\1\34\2\4\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\21\0\1\256\34\0\1\34\2\4\1\34\3\4\1\34"+
    "\2\4\1\34\4\4\1\34\1\4\1\34\1\4\1\34"+
    "\1\257\1\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\4\0"+
    "\24\34\1\154\5\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\4\0\15\34\1\247\14\34\1\0"+
    "\4\34\1\0\2\34\1\0\1\34\1\0\1\34\4\0"+
    "\1\34\1\205\30\34\1\0\4\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\34\46\0\1\260\11\0\1\261\50\0"+
    "\1\262\50\0\1\34\2\4\1\34\1\4\1\263\1\4"+
    "\1\34\2\4\1\34\4\4\1\34\1\4\1\34\1\4"+
    "\1\34\2\4\1\34\1\4\1\34\1\4\1\0\1\34"+
    "\3\4\1\41\2\4\1\0\1\4\1\0\1\34\26\0"+
    "\1\264\27\0\1\34\2\4\1\34\3\4\1\34\2\4"+
    "\1\34\4\4\1\34\1\4\1\34\1\4\1\34\2\4"+
    "\1\34\1\4\1\34\1\4\1\0\1\34\3\4\1\265"+
    "\2\4\1\0\1\4\1\0\1\34\6\0\1\266\63\0"+
    "\1\267\61\0\1\270\25\0\1\34\1\4\1\271\1\34"+
    "\3\4\1\34\2\4\1\34\4\4\1\34\1\4\1\34"+
    "\1\4\1\34\2\4\1\34\1\4\1\34\1\4\1\0"+
    "\1\34\3\4\1\41\2\4\1\0\1\4\1\0\1\34"+
    "\11\0\1\272\51\0\1\104\3\0\1\105\1\0\1\273"+
    "\53\0\1\274\61\0\1\275\66\0\1\276\7\0\1\34"+
    "\2\4\1\34\3\4\1\34\2\4\1\34\4\4\1\34"+
    "\1\4\1\34\1\4\1\34\2\4\1\34\1\4\1\34"+
    "\1\4\1\204\1\34\3\4\1\41\2\4\1\0\1\4"+
    "\1\0\1\34\6\0\1\217\51\0\1\277\54\0\1\300"+
    "\46\0\1\301\73\0\1\302\67\0\1\303\23\0\1\304"+
    "\36\0\1\305\51\0\1\306\75\0\1\307\25\0\1\272"+
    "\113\0\1\310\13\0\1\311\66\0\1\312\71\0\1\313"+
    "\34\0\1\314\25\0\1\315\60\0\1\316\104\0\1\317"+
    "\50\0\1\320\31\0\1\321\31\0\1\322\74\0\1\323"+
    "\41\0\1\324\44\0\1\325\103\0\1\326\11\0\1\327"+
    "\64\0\1\330\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8526];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\3\1\1\11\2\1\1\0"+
    "\42\1\2\0\3\1\1\0\27\1\6\0\23\1\6\0"+
    "\2\1\1\0\1\1\1\11\11\1\1\0\1\1\4\0"+
    "\2\1\1\0\7\1\1\0\1\11\4\0\1\1\1\0"+
    "\4\1\3\0\1\1\1\0\1\1\3\0\1\1\5\0"+
    "\1\1\2\0\1\11\3\0\1\1\10\0\1\1\12\0"+
    "\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SelectParser yyparser;
	int flagLex=0;
	public SelectLexer ( FileReader r, SelectParser yyparser) 
	{
		this(r);	
		this.yyparser = yyparser;
	}
	
	public int getLine() 
	{
		return yyline;
	}
	public void yyerror(String err)
	{
		if(flagLex==0)
		{	
			flagLex=1;
			String message="unknown word "+"\""+err+"\""+"! Please enter the correct name of attribute or any vocabulary word";
	                JOptionPane.showMessageDialog(null, message,"ERROR!" , JOptionPane.ERROR_MESSAGE);
			//System.exit(0);
		}
		//System.out.println(err);
	}
	public void endLex() 
	{
		try
		{
			yyclose();
		}
		catch(IOException io)
		{
			io.printStackTrace();
		}
	}
	
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SelectLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  SelectLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { yyparser.yylval=new SelectParserVal(yytext());return SelectParser.NUM;
          }
        case 16: break;
        case 1: 
          { yyerror(yytext());
          }
        case 17: break;
        case 10: 
          { yyparser.yylval=new SelectParserVal(yytext());return SelectParser.TN;
          }
        case 18: break;
        case 6: 
          { yyparser.yylval=new SelectParserVal("where");return SelectParser.WHERE;
          }
        case 19: break;
        case 8: 
          { return SelectParser.FROM;
          }
        case 20: break;
        case 13: 
          { yyparser.yylval=new SelectParserVal(">");return SelectParser.COND;
          }
        case 21: break;
        case 15: 
          { yyparser.yylval=new SelectParserVal(">=");return SelectParser.COND;
          }
        case 22: break;
        case 3: 
          { ;
          }
        case 23: break;
        case 14: 
          { yyparser.yylval=new SelectParserVal("<=");return SelectParser.COND;
          }
        case 24: break;
        case 7: 
          { yyparser.yylval=new SelectParserVal("=");return SelectParser.COND;
          }
        case 25: break;
        case 11: 
          { yyparser.yylval=new SelectParserVal(yytext());return SelectParser.CN;
          }
        case 26: break;
        case 9: 
          { return SelectParser.SELECT;
          }
        case 27: break;
        case 2: 
          { yyparser.yylval=new SelectParserVal("\""+yytext()+"\"");return SelectParser.NUM;
          }
        case 28: break;
        case 12: 
          { yyparser.yylval=new SelectParserVal("<");return SelectParser.COND;
          }
        case 29: break;
        case 5: 
          { endLex();return SelectParser.EOLN;
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
